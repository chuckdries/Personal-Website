{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CharlesDriesReferencesCurrent.pdf","path":"CharlesDriesReferencesCurrent.pdf","modified":1,"renderable":0},{"_id":"source/CharlesDriesResumeCurrent.pdf","path":"CharlesDriesResumeCurrent.pdf","modified":1,"renderable":0},{"_id":"themes/chucksite/source/images/laurelleft.png","path":"images/laurelleft.png","modified":1,"renderable":1},{"_id":"themes/chucksite/source/images/laurelright.png","path":"images/laurelright.png","modified":1,"renderable":1},{"_id":"themes/chucksite/source/scripts/topsize.js","path":"scripts/topsize.js","modified":1,"renderable":1},{"_id":"themes/chucksite/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/chucksite/source/images/ChuckNew.jpg","path":"images/ChuckNew.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/chucksite/_config.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521867497652},{"_id":"source/.DS_Store","hash":"5b2485431e0fa846fedd30c2b0b6ed10afd0e4f7","modified":1521867497570},{"_id":"source/_posts/Firebird-Robotics-Website.md","hash":"9d29cd1e9425f50182bf7b18f50d1b5f182a65e4","modified":1521867497568},{"_id":"source/_posts/Gitkraken-Glo.md","hash":"c6815847aa34eb9a127c5f233428d5a42ed87034","modified":1521873858230},{"_id":"source/_posts/Intro-to-Web-Development.md","hash":"c33912441701d53bc13f48584a1a588c3888df78","modified":1521869113711},{"_id":"source/_posts/Medication-Tracking-Solution.md","hash":"5ead5de28fbfde51e9946e529f3fd021d0c3cc16","modified":1521873405218},{"_id":"source/_posts/Virtual-Keyality.md","hash":"5ce60cb8d9206e18fd17d258692c46867a335596","modified":1521867497571},{"_id":"source/CharlesDriesReferencesCurrent.pdf","hash":"e2e478d99e391ccd2dab6b81e3657a335ec874dc","modified":1521867497579},{"_id":"source/CharlesDriesResumeCurrent.pdf","hash":"8f77f3d69c784ebb0afe8def1df25c2bd46267a7","modified":1521867497579},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1521867497568},{"_id":"themes/chucksite/layout/post.swig","hash":"168b5d4ac3271b52648d54333c7e7bfde76758a0","modified":1521867497662},{"_id":"themes/chucksite/layout/layout.ejs","hash":"c934f385a2942ac18f72b26d8555b86071f7a5d2","modified":1521868470935},{"_id":"themes/chucksite/scripts/caption.js","hash":"b06c561b0f24f8842debe21ef09e9a68007e79ad","modified":1521867497660},{"_id":"themes/chucksite/layout/project.ejs","hash":"3dab58305bda3773547d158ae8727b35e15cd8a2","modified":1521867497659},{"_id":"themes/chucksite/layout/index.ejs","hash":"65cc77bf65743dc00a9c19352c582a4fe19bcd11","modified":1521868470935},{"_id":"themes/chucksite/layout/category.ejs","hash":"0cf5eaf9d3c234a0df3ded285b06cc4eb0f76d13","modified":1521867497655},{"_id":"themes/chucksite/layout/partials/topBar.ejs","hash":"ae0cacedc759b008597acca0d883b50356b8a5cc","modified":1521867497662},{"_id":"themes/chucksite/source/_sass/style.scss","hash":"c70ce5d1506a4b6b965e41173ca9c07207565af0","modified":1521873887661},{"_id":"themes/chucksite/source/_sass/resonsive.scss","hash":"ce8ebc2ed5e76074c9d20858695739c75c002068","modified":1521867497663},{"_id":"themes/chucksite/source/_sass/animations.scss","hash":"148b0cdf27343781e6af1547a815a13693ba87f3","modified":1521867497662},{"_id":"themes/chucksite/source/images/laurelleft.png","hash":"beb14b617b4cb3e1e48f7c68a0ba983bd78df9a3","modified":1521867497665},{"_id":"themes/chucksite/source/images/laurelright.png","hash":"7c543c784328e8a43b97a75cbb46de0fad053ddd","modified":1521867497665},{"_id":"themes/chucksite/source/scripts/topsize.js","hash":"ee26a14c3c057f915ad8a1e3641eea0a90d7a47c","modified":1521867497666},{"_id":"source/_posts/Gitkraken-Glo/screenshot.png","hash":"ea4c5623a29ed37e7f8cb859bd64fede74f99fcd","modified":1521873326264},{"_id":"themes/chucksite/layout/partials/projectThumb.ejs","hash":"0945f63c6b703df8d5e48e8b24dbc93837bdcf88","modified":1521867497659},{"_id":"themes/chucksite/source/css/style.css","hash":"a85f51b4e1f08280ff2be5437a6f0e8c62cc43fc","modified":1521873899294},{"_id":"source/_posts/Virtual-Keyality/keyality.jpg","hash":"67899f0eec72b7afa861e7821396a3e231dcd738","modified":1521867497578},{"_id":"source/_posts/Intro-to-Web-Development/screenshot.png","hash":"209835702d51cf15fd47fd8150b694db374124ad","modified":1521869232473},{"_id":"source/_posts/Firebird-Robotics-Website/scroll.mp4","hash":"936a8438be5f334d432d7f9c1d043ac9c48a80d9","modified":1521867497579},{"_id":"themes/chucksite/source/images/ChuckNew.jpg","hash":"c626b46dd11ac3e7614d456c9090e37680e65813","modified":1521867497670},{"_id":"source/_posts/Gitkraken-Glo/attachmentviewer.png","hash":"b8f3c9045082c4d04ed506e77ba646c1d5ca642b","modified":1521873826008},{"_id":"source/_posts/Medication-Tracking-Solution/screenshot.png","hash":"81d97df93681310896863150e0601e9f66cd913c","modified":1521867497582},{"_id":"source/_posts/Firebird-Robotics-Website/screenshot.png","hash":"8def1c4b3687ad4a3074e7f7a251397d17b6a0a8","modified":1521867497616}],"Category":[{"name":"Projects","_id":"cjf50fe130002dsqj2y5klz3b"}],"Data":[],"Page":[],"Post":[{"title":"Firebird Robotics Website","layout":"project","coverVideo":"scroll.mp4","date":"2015-04-23T02:25:11.000Z","_content":"\nMy first real website\n\n<!-- more -->\n\n![The 2015 site](screenshot.png)\n\nI was on my high school's robotics team, and we needed a website. This is where I really learned CSS in depth, I handled the photography and wrote the entire site by hand fresh every year. Back in 2015, single page websites were still new and exciting, and part of me is still super proud of how that year's verion turned out.  \n\nI no longer control the content of the site, so instead of linking it directly, I'm linking it as it existed in two different school years while I was still in charge.\n\n[2014 School Year](http://web.archive.org/web/20150209123618im_/http://firebirdrobotics.com/default.html)\n\n[2015 School Year](http://web.archive.org/web/20150908032117im_/http://www.firebirdrobotics.com:80/) ","source":"_posts/Firebird-Robotics-Website.md","raw":"---\ntitle: Firebird Robotics Website\ncategories:\n  - Projects\nlayout: project\ncoverVideo: scroll.mp4\ndate: 2015-04-22 19:25:11\ntags:\n---\n\nMy first real website\n\n<!-- more -->\n\n![The 2015 site](screenshot.png)\n\nI was on my high school's robotics team, and we needed a website. This is where I really learned CSS in depth, I handled the photography and wrote the entire site by hand fresh every year. Back in 2015, single page websites were still new and exciting, and part of me is still super proud of how that year's verion turned out.  \n\nI no longer control the content of the site, so instead of linking it directly, I'm linking it as it existed in two different school years while I was still in charge.\n\n[2014 School Year](http://web.archive.org/web/20150209123618im_/http://firebirdrobotics.com/default.html)\n\n[2015 School Year](http://web.archive.org/web/20150908032117im_/http://www.firebirdrobotics.com:80/) ","slug":"Firebird-Robotics-Website","published":1,"updated":"2018-03-24T04:58:17.568Z","comments":1,"photos":[],"link":"","_id":"cjf50fe0z0000dsqjdxwlw5f5","content":"<p>My first real website</p>\n<a id=\"more\"></a>\n<p><figure><img src=\"screenshot.png\" alt=\"The 2015 site\"><span>The 2015 site</span></figure></p>\n<p>I was on my high school’s robotics team, and we needed a website. This is where I really learned CSS in depth, I handled the photography and wrote the entire site by hand fresh every year. Back in 2015, single page websites were still new and exciting, and part of me is still super proud of how that year’s verion turned out.  </p>\n<p>I no longer control the content of the site, so instead of linking it directly, I’m linking it as it existed in two different school years while I was still in charge.</p>\n<p><a href=\"http://web.archive.org/web/20150209123618im_/http://firebirdrobotics.com/default.html\" target=\"_blank\" rel=\"noopener\">2014 School Year</a></p>\n<p><a href=\"http://web.archive.org/web/20150908032117im_/http://www.firebirdrobotics.com:80/\" target=\"_blank\" rel=\"noopener\">2015 School Year</a> </p>\n","site":{"data":{}},"excerpt":"<p>My first real website</p>","more":"<p><img src=\"screenshot.png\" alt=\"The 2015 site\"></p>\n<p>I was on my high school’s robotics team, and we needed a website. This is where I really learned CSS in depth, I handled the photography and wrote the entire site by hand fresh every year. Back in 2015, single page websites were still new and exciting, and part of me is still super proud of how that year’s verion turned out.  </p>\n<p>I no longer control the content of the site, so instead of linking it directly, I’m linking it as it existed in two different school years while I was still in charge.</p>\n<p><a href=\"http://web.archive.org/web/20150209123618im_/http://firebirdrobotics.com/default.html\" target=\"_blank\" rel=\"noopener\">2014 School Year</a></p>\n<p><a href=\"http://web.archive.org/web/20150908032117im_/http://www.firebirdrobotics.com:80/\" target=\"_blank\" rel=\"noopener\">2015 School Year</a> </p>"},{"title":"Gitkraken Glo","layout":"project","cover":"screenshot.png","date":"2018-03-24T06:34:44.000Z","award":null,"awardSub":null,"_content":"\nAn incandescent issue tracker\n\n<!-- more -->\n\nAs an intern at Axosoft, I worked on several major features of Glo, a trello-like issue board with features geared towards developers and git integration\n\n![Glo](screenshot.png)\n\nGlo is built on ReactJS. The backend is a series of microservices connected with Kafka. I worked on both front and back end, but the most visible changes I made were to the front end.\n\n### Attachment Viewer\n\n![The Gitkraken Glo Attachment Viewer](attachmentviewer.png)\n\nThe first large React component I wrote myself was the Attachment Viewer. I'm really proud of it aesthetically. It's still my favorite part of the app.","source":"_posts/Gitkraken-Glo.md","raw":"---\ntitle: Gitkraken Glo\ncategories:\n  - Projects\nlayout: project\ncover: screenshot.png\ndate: 2018-03-23 23:34:44\ntags:\naward:\nawardSub:\n---\n\nAn incandescent issue tracker\n\n<!-- more -->\n\nAs an intern at Axosoft, I worked on several major features of Glo, a trello-like issue board with features geared towards developers and git integration\n\n![Glo](screenshot.png)\n\nGlo is built on ReactJS. The backend is a series of microservices connected with Kafka. I worked on both front and back end, but the most visible changes I made were to the front end.\n\n### Attachment Viewer\n\n![The Gitkraken Glo Attachment Viewer](attachmentviewer.png)\n\nThe first large React component I wrote myself was the Attachment Viewer. I'm really proud of it aesthetically. It's still my favorite part of the app.","slug":"Gitkraken-Glo","published":1,"updated":"2018-03-24T06:49:40.256Z","_id":"cjf50fe120001dsqjyy55igjg","comments":1,"photos":[],"link":"","content":"<p>An incandescent issue tracker</p>\n<a id=\"more\"></a>\n<p>As an intern at Axosoft, I worked on several major features of Glo, a trello-like issue board with features geared towards developers and git integration</p>\n<p><figure><img src=\"screenshot.png\" alt=\"Glo\"><span>Glo</span></figure></p>\n<p>Glo is built on ReactJS. The backend is a series of microservices connected with Kafka. I worked on both front and back end, but the most visible changes I made were to the front end.</p>\n<h3 id=\"Attachment-Viewer\"><a href=\"#Attachment-Viewer\" class=\"headerlink\" title=\"Attachment Viewer\"></a>Attachment Viewer</h3><p><figure><img src=\"attachmentviewer.png\" alt=\"The Gitkraken Glo Attachment Viewer\"><span>The Gitkraken Glo Attachment Viewer</span></figure></p>\n<p>The first large React component I wrote myself was the Attachment Viewer. I’m really proud of it aesthetically. It’s still my favorite part of the app.</p>\n","site":{"data":{}},"excerpt":"<p>An incandescent issue tracker</p>","more":"<p>As an intern at Axosoft, I worked on several major features of Glo, a trello-like issue board with features geared towards developers and git integration</p>\n<p><img src=\"screenshot.png\" alt=\"Glo\"></p>\n<p>Glo is built on ReactJS. The backend is a series of microservices connected with Kafka. I worked on both front and back end, but the most visible changes I made were to the front end.</p>\n<h3 id=\"Attachment-Viewer\"><a href=\"#Attachment-Viewer\" class=\"headerlink\" title=\"Attachment Viewer\"></a>Attachment Viewer</h3><p><img src=\"attachmentviewer.png\" alt=\"The Gitkraken Glo Attachment Viewer\"></p>\n<p>The first large React component I wrote myself was the Attachment Viewer. I’m really proud of it aesthetically. It’s still my favorite part of the app.</p>"},{"title":"Intro to Web Development","layout":"project","cover":"screenshot.png","date":"2018-03-24T05:20:03.000Z","_content":"\nAn experimental educational twitch stream\n\n<!-- more -->\n\n<div class=\"wrapper-wide\">\n<iframe height=\"600\" src=\"https://www.youtube.com/embed/S060b-fC7X8\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n</div>\n\nI started this project","source":"_posts/Intro-to-Web-Development.md","raw":"---\ntitle: Intro to Web Development\ncategories:\n  - Projects\nlayout: project\ncover: screenshot.png\ndate: 2018-03-23 22:20:03\ntags:\n---\n\nAn experimental educational twitch stream\n\n<!-- more -->\n\n<div class=\"wrapper-wide\">\n<iframe height=\"600\" src=\"https://www.youtube.com/embed/S060b-fC7X8\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n</div>\n\nI started this project","slug":"Intro-to-Web-Development","published":1,"updated":"2018-03-24T05:25:13.711Z","comments":1,"photos":[],"link":"","_id":"cjf50fe150003dsqjrrrrxw4n","content":"<p>An experimental educational twitch stream</p>\n<a id=\"more\"></a>\n<div class=\"wrapper-wide\"><br><iframe height=\"600\" src=\"https://www.youtube.com/embed/S060b-fC7X8\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe><br></div>\n\n<p>I started this project</p>\n","site":{"data":{}},"excerpt":"<p>An experimental educational twitch stream</p>","more":"<div class=\"wrapper-wide\"><br><iframe height=\"600\" src=\"https://www.youtube.com/embed/S060b-fC7X8\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe><br></div>\n\n<p>I started this project</p>"},{"title":"Medication Tracking Solution","layout":"project","cover":"screenshot.png","date":"2018-03-22T23:02:17.000Z","award":"1st Place","awardSub":"OHack '17","_content":"A system to help a foster home track medications\n\n<!-- more -->\nWinner: Opportunity Hack 20XX\n\nA foster home needed to track the medication parents gave their kids and generate reports for DCS compliance. We split the application front end into two parts: a client for their health administrator to manage perscriptions, and a client for foster parents to log medications taken.\n\nI focused on the health administrator dashboard. This client was designed for a skilled user who knows exactly what their data needs to look like. My goal was to stay out of the way, to give them as much clear, straightforward access to the database as possible.\n\n![The table UI](screenshot.png)\n\nMy biggest challenge in this project was the relationship between parents and homes. In the backend, this is a many-to-many relationship; every child who needs medication is assigned a home, but multiple homes can share parents, and a foster parent can be assigned to multiple homes.\n\nIn the database, this is stored as its own table, but to a non-programmer, the idea of a separate table for this relationship might be confusing, and keeping track of it seemed like a hurdle. My problem was this: how do I let the user edit this table without exposing it directly?\n\nMy solution seems obvious in retrospect: I parse the table and synthesize a multi-value attribute on the Homes table and on the Parents table. This way,a the administrator can assign a parent to a home through the parent list or through the home list, whichever is easiest.\n\nI make this process easier by looking up all foreign keys as I do the synthesis so I can present a list of check boxes.\n\n![A many-to-many relationship editor](screenshot.png)\n\nThis client was written in Typescript with Vue.js and Bootstrap.\n","source":"_posts/Medication-Tracking-Solution.md","raw":"---\ntitle: Medication Tracking Solution\ncategories:\n  - Projects\nlayout: project\ncover: screenshot.png\ndate: 2018-03-22 16:02:17\ntags:\naward: 1st Place\nawardSub: OHack '17\n---\nA system to help a foster home track medications\n\n<!-- more -->\nWinner: Opportunity Hack 20XX\n\nA foster home needed to track the medication parents gave their kids and generate reports for DCS compliance. We split the application front end into two parts: a client for their health administrator to manage perscriptions, and a client for foster parents to log medications taken.\n\nI focused on the health administrator dashboard. This client was designed for a skilled user who knows exactly what their data needs to look like. My goal was to stay out of the way, to give them as much clear, straightforward access to the database as possible.\n\n![The table UI](screenshot.png)\n\nMy biggest challenge in this project was the relationship between parents and homes. In the backend, this is a many-to-many relationship; every child who needs medication is assigned a home, but multiple homes can share parents, and a foster parent can be assigned to multiple homes.\n\nIn the database, this is stored as its own table, but to a non-programmer, the idea of a separate table for this relationship might be confusing, and keeping track of it seemed like a hurdle. My problem was this: how do I let the user edit this table without exposing it directly?\n\nMy solution seems obvious in retrospect: I parse the table and synthesize a multi-value attribute on the Homes table and on the Parents table. This way,a the administrator can assign a parent to a home through the parent list or through the home list, whichever is easiest.\n\nI make this process easier by looking up all foreign keys as I do the synthesis so I can present a list of check boxes.\n\n![A many-to-many relationship editor](screenshot.png)\n\nThis client was written in Typescript with Vue.js and Bootstrap.\n","slug":"Medication-Tracking-Solution","published":1,"updated":"2018-03-24T06:36:45.218Z","comments":1,"photos":[],"link":"","_id":"cjf50fe1e0009dsqj60gqainy","content":"<p>A system to help a foster home track medications</p>\n<a id=\"more\"></a>\n<p>Winner: Opportunity Hack 20XX</p>\n<p>A foster home needed to track the medication parents gave their kids and generate reports for DCS compliance. We split the application front end into two parts: a client for their health administrator to manage perscriptions, and a client for foster parents to log medications taken.</p>\n<p>I focused on the health administrator dashboard. This client was designed for a skilled user who knows exactly what their data needs to look like. My goal was to stay out of the way, to give them as much clear, straightforward access to the database as possible.</p>\n<p><figure><img src=\"screenshot.png\" alt=\"The table UI\"><span>The table UI</span></figure></p>\n<p>My biggest challenge in this project was the relationship between parents and homes. In the backend, this is a many-to-many relationship; every child who needs medication is assigned a home, but multiple homes can share parents, and a foster parent can be assigned to multiple homes.</p>\n<p>In the database, this is stored as its own table, but to a non-programmer, the idea of a separate table for this relationship might be confusing, and keeping track of it seemed like a hurdle. My problem was this: how do I let the user edit this table without exposing it directly?</p>\n<p>My solution seems obvious in retrospect: I parse the table and synthesize a multi-value attribute on the Homes table and on the Parents table. This way,a the administrator can assign a parent to a home through the parent list or through the home list, whichever is easiest.</p>\n<p>I make this process easier by looking up all foreign keys as I do the synthesis so I can present a list of check boxes.</p>\n<p><figure><img src=\"screenshot.png\" alt=\"A many-to-many relationship editor\"><span>A many-to-many relationship editor</span></figure></p>\n<p>This client was written in Typescript with Vue.js and Bootstrap.</p>\n","site":{"data":{}},"excerpt":"<p>A system to help a foster home track medications</p>","more":"<p>Winner: Opportunity Hack 20XX</p>\n<p>A foster home needed to track the medication parents gave their kids and generate reports for DCS compliance. We split the application front end into two parts: a client for their health administrator to manage perscriptions, and a client for foster parents to log medications taken.</p>\n<p>I focused on the health administrator dashboard. This client was designed for a skilled user who knows exactly what their data needs to look like. My goal was to stay out of the way, to give them as much clear, straightforward access to the database as possible.</p>\n<p><img src=\"screenshot.png\" alt=\"The table UI\"></p>\n<p>My biggest challenge in this project was the relationship between parents and homes. In the backend, this is a many-to-many relationship; every child who needs medication is assigned a home, but multiple homes can share parents, and a foster parent can be assigned to multiple homes.</p>\n<p>In the database, this is stored as its own table, but to a non-programmer, the idea of a separate table for this relationship might be confusing, and keeping track of it seemed like a hurdle. My problem was this: how do I let the user edit this table without exposing it directly?</p>\n<p>My solution seems obvious in retrospect: I parse the table and synthesize a multi-value attribute on the Homes table and on the Parents table. This way,a the administrator can assign a parent to a home through the parent list or through the home list, whichever is easiest.</p>\n<p>I make this process easier by looking up all foreign keys as I do the synthesis so I can present a list of check boxes.</p>\n<p><img src=\"screenshot.png\" alt=\"A many-to-many relationship editor\"></p>\n<p>This client was written in Typescript with Vue.js and Bootstrap.</p>"},{"title":"Virtual Keyality","layout":"project","cover":"keyality.jpg","date":"2018-03-22T01:10:25.000Z","award":"3rd Place","awardSub":"Desert Hacks '17","_content":"\nA VR Typing Game\n\n<!-- more -->","source":"_posts/Virtual-Keyality.md","raw":"---\ntitle: Virtual Keyality\ncategories:\n  - Projects\nlayout: project\ncover: keyality.jpg\ndate: 2018-03-21 18:10:25\ntags:\naward: 3rd Place\nawardSub: Desert Hacks '17\n---\n\nA VR Typing Game\n\n<!-- more -->","slug":"Virtual-Keyality","published":1,"updated":"2018-03-24T04:58:17.571Z","comments":1,"photos":[],"link":"","_id":"cjf50fe1f000adsqjrm4ak3co","content":"<p>A VR Typing Game</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<p>A VR Typing Game</p>","more":""}],"PostAsset":[{"_id":"source/_posts/Intro-to-Web-Development/screenshot.png","slug":"screenshot.png","post":"cjf50fe150003dsqjrrrrxw4n","modified":1,"renderable":0},{"_id":"source/_posts/Firebird-Robotics-Website/screenshot.png","slug":"screenshot.png","post":"cjf50fe0z0000dsqjdxwlw5f5","modified":1,"renderable":0},{"_id":"source/_posts/Firebird-Robotics-Website/scroll.mp4","slug":"scroll.mp4","post":"cjf50fe0z0000dsqjdxwlw5f5","modified":1,"renderable":0},{"_id":"source/_posts/Gitkraken-Glo/attachmentviewer.png","slug":"attachmentviewer.png","post":"cjf50fe120001dsqjyy55igjg","modified":1,"renderable":0},{"_id":"source/_posts/Gitkraken-Glo/screenshot.png","post":"cjf50fe120001dsqjyy55igjg","slug":"screenshot.png","modified":1,"renderable":1},{"_id":"source/_posts/Medication-Tracking-Solution/screenshot.png","slug":"screenshot.png","post":"cjf50fe1e0009dsqj60gqainy","modified":1,"renderable":0},{"_id":"source/_posts/Virtual-Keyality/keyality.jpg","post":"cjf50fe1f000adsqjrm4ak3co","slug":"keyality.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjf50fe0z0000dsqjdxwlw5f5","category_id":"cjf50fe130002dsqj2y5klz3b","_id":"cjf50fe180006dsqjo434085w"},{"post_id":"cjf50fe120001dsqjyy55igjg","category_id":"cjf50fe130002dsqj2y5klz3b","_id":"cjf50fe190007dsqjprwurynw"},{"post_id":"cjf50fe150003dsqjrrrrxw4n","category_id":"cjf50fe130002dsqj2y5klz3b","_id":"cjf50fe190008dsqj8d8zoc30"},{"post_id":"cjf50fe1e0009dsqj60gqainy","category_id":"cjf50fe130002dsqj2y5klz3b","_id":"cjf50fe1f000bdsqjdolw9qw2"},{"post_id":"cjf50fe1f000adsqjrm4ak3co","category_id":"cjf50fe130002dsqj2y5klz3b","_id":"cjf50fe1g000cdsqje49mchas"}],"PostTag":[],"Tag":[]}}